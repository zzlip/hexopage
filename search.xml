<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试</title>
      <link href="/2024/06/03/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/06/03/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>测试<br>前提环境：拥有github&#x2F;gitee账户，电脑上装有git</p><p>建议在Typora中设置图片存储路径为相对路径（图片也上传到github上），这样远程打开笔记时也能显示图片</p><p>方法一<br>1.登录github，创建一个新的仓库（这里创建的仓库名为：Typora）</p><p>2.复制仓库的https地址备用</p><p>3.本地操作：</p><p>（1）进入我们需要上传到github上的目录中，右键打开Git Bash Here</p><p>（2）输入：git clone <a href="https://github.com/xxxx/xxxxxx.git%EF%BC%88https://github.com/xxxx/xxxxxx.git">https://github.com/xxxx/xxxxxx.git（https://github.com/xxxx/xxxxxx.git</a> 替换成之前复制的地址）</p><p>（3）这个步骤以后本地项目文件夹下面就会多出个文件夹，该文件夹名即为github上面的仓库名</p><p>（4）如图我多出了个Typora文件夹，我们把本地文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下</p><p>（5）cd 进入typora目录</p><p>（6）接下来依次输入以下代码即可完成其他剩余操作：</p><pre><code>1、git add * （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）2、git commit -m &quot;提交信息&quot; （注：“提交信息”里面换成你需要，如“first commit”）3、git push -u origin master（注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）注：我这里的主分支名字为main，所以push时用的是main</code></pre><p>提示:（6）的第3小步骤若报错failed to push some refs to <a href="https://github.com/xxxxxx/xxxx.git%E8%AF%B4%E6%98%8E%E5%9C%A8%E5%88%9B%E5%BB%BAgithub%E4%BB%93%E5%BA%93%E7%9A%84%E6%97%B6%E5%80%99%E9%80%89%E6%8B%A9%E4%BA%86%E5%88%9B%E5%BB%BAREADME.md%E6%96%87%E4%BB%B6">https://github.com/xxxxxx/xxxx.git说明在创建github仓库的时候选择了创建README.md文件</a></p><p>这时先执行$ git pull –rebase origin master，再push就可以了<br>————————————————</p><pre><code>                        版权声明：本文为博主原创文章，遵循 CC 4.0 BY 版权协议，转载请附上原文出处链接和本声明。                    </code></pre><p>原文链接：<a href="https://blog.csdn.net/qq_39588003/article/details/115670602">https://blog.csdn.net/qq_39588003/article/details/115670602</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker容器的停止与删除</title>
      <link href="/2024/06/02/%E9%9A%8F%E4%BE%BF/"/>
      <url>/2024/06/02/%E9%9A%8F%E4%BE%BF/</url>
      
        <content type="html"><![CDATA[<p>1.停止docker容器<br>要停止特定容器，请在 docker stop 命令中使用其 ID 或名称：</p><p>docker stop container_name_or_ID</p><p>2.停止所有正在运行的docker容器</p><p>docker ps -q | xargs docker stop</p><p>3.删除docker容器<br>删除容器指定容器 ID 或名称：</p><p>docker rm container_id_or_name</p><p>4.强制删除某个docker 容器<br>docker rm -f container_id_or_name</p><p>5.删除所有已停止的容器</p><p>docker ps -a -q -f status&#x3D;exited | xargs docker rm</p><p>6.删除所有 Docker 容器</p><p>docker ps -q | xargs docker rm</p><p>引用：1.<a href="https://cn.linux-console.net/?p=20033">https://cn.linux-console.net/?p=20033</a><br>2.<a href="https://cn.linux-console.net/?p=20047">https://cn.linux-console.net/?p=20047</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/01/hello-world/"/>
      <url>/2024/06/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>本站部署方案<br>Github、托管网站页面<br>Github action、自动部署<br>Hexo、网站系统</p><p>网站使用的是Hexo[<a href="https://hexo.io/zh-cn/]">https://hexo.io/zh-cn/]</a> 博客系统，主题使用的是：solitude 主题 [<a href="https://solitude.js.org/]%E3%80%82">https://solitude.js.org/]。</a></p><p>目前的操作是在本地编辑文章，然后一键同步到Github托管仓库，托管仓库自动启用Github action部署到页面网站的仓库，在浏览器即可浏览发布的文章。</p><p>现在这个流程还是有些繁琐，Qexo 也部署了，但是不知道是什么原因，可以读取Hexo目录部署的网站，文章都可以加载，就是使用Qexo新建文章的时候总是提示：请输入正确的文章名。测试几次未解决，暂时搁置。</p><p>流程存档</p><p>部署流程：<br>Github网站注册登录（流程此处略过），新建两个存储库，一个公开存储库。存放Hexo网站生成的页面，也就是最终的网站。<br>一个私有存储库，当然也可以公开。私有还是安全点，毕竟所有的源码都在这个存储库。主要存放Hexo系统源码，相当于网站后台。</p><p>源码存储库，部署Github action，推送页面到页面公开存储库。</p><p>电脑端操作：<br>电脑安装<br>1.Git<br>2.node.js<br>3.Visual Studio Code<br>上面Git和node.js是环境，Visual Studio Code是应用，主要用于修改本地的Hexo源码</p><p>本地使用Powshell，或Git命令安装Hexo博客系统：<br>npm install -g hexo-cli<br>运行此命令后会在当前文件夹下安装Hexo。<br>为了管理方便可以先建立文件夹，比如D:\Hexo，在这个文件夹下右键，然后“在终端中打开”打开Powshell。<br>安装完成后：<br>hexo clean(清理缓存等)<br>生成页面：<br>hexo g（生成页面）<br>本地浏览<br>hexo s（本地服务）<br>在浏览器输入：<br><a href="http://localhost:4000/">http://localhost:4000/</a> ，本地浏览网站</p><p>网站名称，描述，网站关键字等在config.yml设置，其他在模板的设置文件里修改。<br>修改网站主题：<br>theme: solitude：修改主题为 solitude(主题的安装及修改篇幅有限另外存档)</p><p>最后一定要设置网站页面公开存储库的仓库地址<br>deploy:<br>  type: git<br>  repository: <a href="mailto:&#103;&#x69;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>:XXXX&#x2F;XXXpage.git<br>  branch: main</p><p>修改完成后，输入：<br>git push -f origin main<br>将源码推送到仓库<br>此处不可以使用“hexo d”(这个命令推送的是生成的页面，每次命令会覆盖上次命令)<br>如果推送不成功，或者提示没有任何改变而中止推送的话，使用：<br>git add .<br>git commit -m “更新”<br>git push origin main<br>强制推送源码</p><p>推送成功后，Github action会启动，然后将源码文件夹下生成的新页面，自动推送到页面公开的存储库，页面存储库绑定自己的域名就可以访问了。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
